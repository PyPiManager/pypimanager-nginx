user  nginx;
worker_processes  auto;
worker_rlimit_nofile 65535;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main escape=none '$remote_addr - $remote_user [$time_local] "$request" '
                                 '$status $body_bytes_sent "$http_referer" '
                                 '"$http_user_agent" "$http_x_forwarded_for"';

    map $time_iso8601 $logdate {
        '~^(?<ymd>\d{4}-\d{2}-\d{2})' $ymd;
        default                       'date-not-found';
    }

    access_log  /var/log/nginx/access.log  main;

    sendfile        on;
    tcp_nopush on;
    keepalive_timeout  60;
    types_hash_max_size 2048;


    # 设置缓存路径并且使用一块最大100M的共享内存，用于硬盘上的文件索引，包括文件名和请求次数，
    # 每个文件在1天内若不活跃（无请求）则从硬盘上淘汰，硬盘缓存最大5G，满了则根据LRU算法自动清除缓存。
    proxy_cache_path /data/nginx/cache levels=1:2 keys_zone=assetscache:100m inactive=1d max_size=5g;

    # 开启gzip
    gzip on;
    # 设置允许压缩的页面最小字节数; 这里表示如果文件小于10个字节，就不用压缩，因为没有意义，本来就很小
    gzip_min_length 10k;
    # 设置压缩缓冲区大小，此处设置为4个16K内存作为压缩结果流缓存
    gzip_buffers 4 16k;
    # 设置压缩比率，最小为1，处理速度快，传输速度慢；9为最大压缩比，处理速度慢，传输速度快; 
    # 这里表示压缩级别，可以是0到9中的任一个，级别越高，压缩就越小，节省了带宽资源，但同时也消耗CPU资源，所以一般折中为6
    gzip_comp_level 3;
    # 进行压缩的文件类型。javascript有多种形式
    gzip_types text/plain application/javascript application/x-javascript text/css application/xml text/javascript application/x-httpd-php;
    # 选择支持vary header；该选项可以让前端的缓存服务器缓存经过gzip压缩的页面; 这个可以不写，表示在传送数据时，给客户端说明我使用了gzip压缩
    gzip_vary on;
    # 配置禁用gzip条件，支持正则。此处表示IE6及以下不启用gzip（因为ie低版本不支持）
    gzip_disable "MSIE [1-6]\.";

    include /etc/nginx/conf.d/*.conf;
}